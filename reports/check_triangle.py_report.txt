===========================================================================
===================== UNSAT PATH REPORT START =============================
===========================================================================


################ FUNCTION NAME: is_divisible_by_3_5 ################

================== ERROR: UNSAT PATH FOUND ===================
Unsat core length:2
Unsat core: 
	1:z3.And(num == _num_0, num2 == _num2_0)
	2:_num_0 == 15
Statements in Unsat Path: 
	Line1:enter: is_divisible_by_3_5(num, num2)
	Line2:num = 15
	Line3:_if: num % 3 == 0
	Line8:return False
	Line1:exit: is_divisible_by_3_5(num, num2)

================== ERROR: UNSAT PATH FOUND ===================
Unsat core length:2
Unsat core: 
	1:z3.And(num == _num_0, num2 == _num2_0)
	2:(_num_0 % 3 == 0)
Statements in Unsat Path: 
	Line1:enter: is_divisible_by_3_5(num, num2)
	Line2:num = 15
	Line3:_if: num % 3 == 0
	Line4:_if: num % 5 == 0
	Line7:return False
	Line1:exit: is_divisible_by_3_5(num, num2)

###################################################################

################ FUNCTION NAME: is_divisible_by_3_5_without_constant ################

####################################################################################

################ FUNCTION NAME: check_triangle ################

================== ERROR: UNSAT PATH FOUND ===================
Unsat core length:3
Unsat core: 
	1:(_a_0 == _b_0)
	2:(_a_0 == _c_0)
	3:z3.And(a == _a_0, b == _b_0, c == _c_0)
Statements in Unsat Path: 
	Line1:enter: check_triangle(a, b, c)
	Line2:_if: a == b
	Line3:_if: a == c
	Line4:_if: b == c
	Line7:return 'Isosceles'
	Line1:exit: check_triangle(a, b, c)

##############################################################

################ FUNCTION NAME: check_triangle2 ################

================== ERROR: UNSAT PATH FOUND ===================
Unsat core length:5
Unsat core: 
	2:z3.And(a == _a_0, b == _b_0, c == _c_0)
	3:(_a_0 == _c_0)
	4:(_a_0 == _b_0)
	5:_a_0 == 1
Statements in Unsat Path: 
	Line1:enter: check_triangle2(a, b, c)
	Line2:a = 1
	Line3:_if: not is_divisible_by_3_5(a, b)
	Line5:_if: a == b
	Line6:_if: a == c
	Line7:_if: b == c
	Line10:return 'Isosceles'
	Line1:exit: check_triangle2(a, b, c)

###############################################################

################ FUNCTION NAME: is_divisible_by_3_5 (CHECK-WITH-CONSTANT-VARIABLES) ################

==============================================================
Variables: 1, unknown

================== ERROR: UNSAT PATH FOUND ===================
Unsat core length:2
Unsat core: 
	1:_num_0 == 15
	2:z3.And(num == _num_0, num2 == _num2_0)
Statements in Unsat Path: 
	Line1:enter: is_divisible_by_3_5(num, num2)
	Line2:num = 15
	Line3:_if: num % 3 == 0
	Line8:return False
	Line1:exit: is_divisible_by_3_5(num, num2)

==============================================================
Variables: 1, unknown

================== ERROR: UNSAT PATH FOUND ===================
Unsat core length:2
Unsat core: 
	1:z3.And(num == _num_0, num2 == _num2_0)
	2:(_num_0 % 3 == 0)
Statements in Unsat Path: 
	Line1:enter: is_divisible_by_3_5(num, num2)
	Line2:num = 15
	Line3:_if: num % 3 == 0
	Line4:_if: num % 5 == 0
	Line7:return False
	Line1:exit: is_divisible_by_3_5(num, num2)

###################################################################################################


===========================================================================
===================== OTHER SATISIED PATH CHECKED =========================
===========================================================================


################ FUNCTION NAME: is_divisible_by_3_5 ################
num: 15
num2: 2
a: None
b: None
c: None
============ Contraint Path ============
z3.And(num == _num_0, num2 == _num2_0)
_num_0 == 15
(_num_0 % 3 == 0)
(_num_0 % 5 == 0)
========================================


###################################################################

################ FUNCTION NAME: is_divisible_by_3_5_without_constant ################
num: 1
num2: 2
a: None
b: None
c: None
============ Contraint Path ============
z3.And(num == _num_0, num2 == _num2_0)
z3.Not(_num_0 % 3 == 0)
========================================

num: 0
num2: 4
a: None
b: None
c: None
============ Contraint Path ============
z3.And(num == _num_0, num2 == _num2_0)
(_num_0 % 3 == 0)
(_num_0 % 5 == 0)
========================================

num: 6
num2: 7
a: None
b: None
c: None
============ Contraint Path ============
z3.And(num == _num_0, num2 == _num2_0)
(_num_0 % 3 == 0)
z3.Not(_num_0 % 5 == 0)
========================================


####################################################################################

################ FUNCTION NAME: check_triangle ################
num: None
num2: None
a: 2
b: 2
c: 3
============ Contraint Path ============
z3.And(a == _a_0, b == _b_0, c == _c_0)
(_a_0 == _b_0)
z3.Not(_a_0 == _c_0)
========================================

num: None
num2: None
a: 4
b: 5
c: 5
============ Contraint Path ============
z3.And(a == _a_0, b == _b_0, c == _c_0)
z3.Not(_a_0 == _b_0)
z3.Not(_b_0 != _c_0)
========================================

num: None
num2: None
a: 6
b: 6
c: 6
============ Contraint Path ============
z3.And(a == _a_0, b == _b_0, c == _c_0)
(_a_0 == _b_0)
(_a_0 == _c_0)
(_b_0 == _c_0)
========================================

num: None
num2: None
a: 8
b: 7
c: 8
============ Contraint Path ============
z3.And(a == _a_0, b == _b_0, c == _c_0)
z3.Not(_a_0 == _b_0)
(_b_0 != _c_0)
(_a_0 == _c_0)
========================================

num: None
num2: None
a: 9
b: 10
c: 11
============ Contraint Path ============
z3.And(a == _a_0, b == _b_0, c == _c_0)
z3.Not(_a_0 == _b_0)
(_b_0 != _c_0)
z3.Not(_a_0 == _c_0)
========================================


##############################################################

################ FUNCTION NAME: check_triangle2 ################
num: None
num2: None
a: 1
b: 3
c: 2
============ Contraint Path ============
z3.And(a == _a_0, b == _b_0, c == _c_0)
_a_0 == 1
========================================

num: None
num2: None
a: 1
b: 1
c: 4
============ Contraint Path ============
z3.And(a == _a_0, b == _b_0, c == _c_0)
_a_0 == 1
(_a_0 == _b_0)
z3.Not(_a_0 == _c_0)
========================================

num: None
num2: None
a: 1
b: 5
c: 5
============ Contraint Path ============
z3.And(a == _a_0, b == _b_0, c == _c_0)
_a_0 == 1
z3.Not(_a_0 == _b_0)
z3.Not(_b_0 != _c_0)
========================================

num: None
num2: None
a: 1
b: 1
c: 1
============ Contraint Path ============
z3.And(a == _a_0, b == _b_0, c == _c_0)
_a_0 == 1
(_a_0 == _b_0)
(_a_0 == _c_0)
(_b_0 == _c_0)
========================================

num: None
num2: None
a: 1
b: 6
c: 1
============ Contraint Path ============
z3.And(a == _a_0, b == _b_0, c == _c_0)
_a_0 == 1
z3.Not(_a_0 == _b_0)
(_b_0 != _c_0)
(_a_0 == _c_0)
========================================

num: None
num2: None
a: 1
b: 7
c: 8
============ Contraint Path ============
z3.And(a == _a_0, b == _b_0, c == _c_0)
_a_0 == 1
z3.Not(_a_0 == _b_0)
(_b_0 != _c_0)
z3.Not(_a_0 == _c_0)
========================================


###############################################################

################ FUNCTION NAME: is_divisible_by_3_5 (CHECK-WITH-CONSTANT-VARIABLES) ################
num: 15
num2: 2
a: None
b: None
c: None
============ Contraint Path ============
z3.And(num == _num_0, num2 == _num2_0)
_num_0 == 15
(_num_0 % 3 == 0)
(_num_0 % 5 == 0)
========================================

*constant*: ['1', 'unknown']

###################################################################################################
